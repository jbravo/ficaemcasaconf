variables:
  MAVEN_OPTS: "-Djava.awt.headless=true -Dmaven.repo.local=./.m2/repository/"
  DOCKER_DRIVER: overlay

cache:
  paths:
    - ./.m2/repository/
    - target/

stages:
  - tests
  - build
  - image
  
1-smoke:
  stage: tests
  tags:
    - shell
  only:
    - master
  variables:
    GIT_STRATEGY: none
  script:
    - echo running smoke test || true
    
2-unit:
  stage: tests
  tags:
    - shell
  only:
    - master
  variables:
    GIT_STRATEGY: none
  script:
    - echo running unit test || true

3-style:
  stage: tests
  tags:
    - shell
  only:
    - master
  variables:
    GIT_STRATEGY: none
  script:
    - echo running checkstyle || true

4-smell:
  stage: tests
  tags:
    - shell
  only:
    - master
  variables:
    GIT_STRATEGY: none
  script:
    - echo running codesmell || true

5-sonar-report:
  stage: tests
  tags:
    - shell
  only:
    - master
  variables:
    GIT_STRATEGY: none
  script:
    - echo running sonar || true

java_build:
  stage: build
  image: maven:3-jdk-8
  tags:
    - maven-build
  script:
    - mvn package -DskipTests
    - echo "Empacotando o c√≥digo"
  artifacts:
    paths:
      - target/demo-0.0.1-SNAPSHOT.jar

1-docker_build:
  stage: image
  tags:
    - shell
  script:
    - docker build -f Dockerfile -t $NEXUS_REPO:$NEXUS_PORT_PUSH/demo:$CI_PIPELINE_ID .
    - docker build -f Dockerfile -t $NEXUS_REPO:$NEXUS_PORT_PUSH/demo:latest .

2-docker_sec:
  stage: image
  tags:
    - shell
  only:
    - master
  variables:
    GIT_STRATEGY: none
  script:
    - echo "running clair on image $CI_PIPELINE_ID" || true
    
3-docker_clean:
  stage: image
  tags:
    - shell
  only:
    - master
  script:
    - echo "Limpando imagens antigas e mantenas apenas latest e $CI_PIPELINE_ID"
    - for i in `docker images|grep demo|egrep -v '(latest|$CI_PIPELINE_ID)' | awk '{ print $3 }'`;do docker rmi -f $i;done